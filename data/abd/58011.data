{'TMP': 'T:\\', 'COMPUTERNAME': 'SSTORM-PC', 'VS140COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\', 'PROCESSOR_REVISION': '2d07', 'USERDOMAIN': 'SSTORM-PC', 'AFX43_HYPDIC_PATH': 'C:\\Program Files\\AccessData\\Forensic Toolkit\\5.6\\bin\\XSL-Formatter\\hyphenation;C:\\Program Files\\AccessData\\Forensic Toolkit\\4.2\\Forensic Toolkit\\4.2\\bin\\XSL-Formatter\\hyphenation', 'PSMODULEPATH': 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 45 Stepping 7, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'AFX43_FONT_CONFIGFILE': 'C:\\Program Files\\AccessData\\Forensic Toolkit\\5.6\\bin\\XSL-Formatter\\bin\\font.config.xml;C:\\Program Files\\AccessData\\Forensic Toolkit\\4.2\\Forensic Toolkit\\4.2\\bin\\XSL-Formatter\\bin\\font.config.xml', 'PATH': 'C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\Program Files\\Common Files\\Microsoft Shared\\Windows Live;C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\Windows Live;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Putty;C:\\Program Files (x86)\\sleuthkit-4.1.3-win32\\bin;C:\\Program Files (x86)\\volatility_2.5.win.standalone;C:\\Program Files\\plaso;C:\\Program Files\\md5deep-4.4;C:\\Program Files\\AccessData\\Forensic Toolkit\\5.6\\bin\\XSL-Formatter\\bin;C:\\Program Files (x86)\\sysinternals;C:\\Program Files\\dc3dd-dcfl-win7-64-7-2-641;C:\\Program Files (x86)\\AMD\\ATI.ACE\\Core-Static;C:\\Program Files\\oclHashcat-1.35;C:\\Program Files (x86)\\Windows Live\\Shared;C:\\Program Files (x86)\\Common Files\\Teleca Shared;C:\\Program Files (x86)\\tee;C:\\Program Files (x86)\\Nmap;C:\\Program Files (x86)\\dumpkeychain;C:\\Program Files (x86)\\aircrack-ng-1.2-rc2-win\\bin;C:\\Python27;C:\\Program Files\\AccessData\\Forensic Toolkit\\4.2\\Forensic Toolkit\\4.2\\bin\\XSL-Formatter\\bin;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\ActivIdentity\\ActivClient\\;C:\\Program Files (x86)\\ActivIdentity\\ActivClient\\;C:\\Windows\\system32\\config\\systemprofile\\.dnx\\bin;C:\\Program Files\\Microsoft DNX\\Dnvm\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\Git\\cmd', 'SYSTEMROOT': 'C:\\Windows', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'VSSDK140INSTALL': 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VSSDK\\', 'TEMP': 'T:\\', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'x86', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'USERPROFILE': 'C:\\Users\\Student', 'AFX43_DMC_TBLPATH': 'C:\\Program Files\\AccessData\\Forensic Toolkit\\5.6\\bin\\XSL-Formatter\\base2;C:\\Program Files\\AccessData\\Forensic Toolkit\\4.2\\Forensic Toolkit\\4.2\\bin\\XSL-Formatter\\base2', 'HOMEPATH': '\\Users\\Student', 'DEFAULT_CA_NR': 'CA100', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'sstorm', 'LOGONSERVER': '\\\\SSTORM-PC', 'PROMPT': '$P$G', 'WINDOWS_TRACING_FLAGS': '3', 'PROGRAMDATA': 'C:\\ProgramData', 'AFX43_LIC_PATH': 'C:\\Program Files\\AccessData\\Forensic Toolkit\\5.6\\bin\\XSL-Formatter\\bin;C:\\Program Files\\AccessData\\Forensic Toolkit\\4.2\\Forensic Toolkit\\4.2\\bin\\XSL-Formatter\\bin', 'SESSIONNAME': 'Console', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'ASL.LOG': 'Destination=file', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\Windows', 'OPENSSL_CONF': 'C:\\Users\\Student\\AppData\\Local\\Temp\\{A48A84F7-BB48-4046-8BCE-40CD742C9BB4}\\\\openssl.cfg', 'WINDOWS_TRACING_LOGFILE': 'C:\\BVTBin\\Tests\\installpackage\\csilogfile.log', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '8', 'APPDATA': 'C:\\Users\\Student\\AppData\\Roaming', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'AFX43_HOME': 'C:\\Program Files\\AccessData\\Forensic Toolkit\\5.6\\bin\\XSL-Formatter\\bin;C:\\Program Files\\AccessData\\Forensic Toolkit\\4.2\\Forensic Toolkit\\4.2\\bin\\XSL-Formatter\\bin', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'LOCALAPPDATA': 'C:\\Users\\Student\\AppData\\Local'}